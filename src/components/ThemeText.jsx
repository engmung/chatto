import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const BrandBar = ({ color, textState, isChatOpen }) => (
  <AnimatePresence mode="sync">
    {textState !== 'none' && !isChatOpen && (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.5 }}
        className="fixed w-[1100px] left-1/2 -translate-x-1/2 top-14"
      >
        <svg 
          width="1159" 
          height="22" 
          viewBox="0 0 1159 22" 
          fill="none" 
          xmlns="http://www.w3.org/2000/svg"
          className="w-full drop-shadow-sm"
        >
          <path d="M1126.57 1.79326H1121.12C1121.12 3.95973 1119.36 5.71209 1117.2 5.71209C1115.03 5.71209 1113.28 3.95468 1113.28 1.79326H1107.83C1107.83 6.96955 1112.03 11.1611 1117.2 11.1611C1122.37 11.1611 1126.57 6.96955 1126.57 1.79326Z" fill={color}/>
          <path d="M1117.2 11.161C1112.03 11.161 1107.83 15.3525 1107.83 20.5288H1113.28C1113.28 18.3624 1115.03 16.61 1117.2 16.61C1119.36 16.61 1121.11 18.3674 1121.11 20.5288H1126.56C1126.57 15.3525 1122.37 11.161 1117.2 11.161Z" fill={color}/>
          <path d="M1152.15 6.8332C1148.37 6.8332 1145.3 9.89901 1145.3 13.681C1145.3 17.463 1148.37 20.5289 1152.15 20.5289C1155.93 20.5289 1159 17.463 1159 13.681C1159 9.89901 1155.93 6.8332 1152.15 6.8332ZM1155.83 14.8759C1156.58 15.8589 1155.59 17.2255 1154.42 16.809C1154.46 18.0514 1152.85 18.5739 1152.15 17.5471C1151.45 18.5702 1149.85 18.0514 1149.88 16.809C1148.71 17.2255 1147.72 15.8589 1148.48 14.8759C1147.28 14.5251 1147.28 12.8369 1148.48 12.4861C1147.72 11.5032 1148.71 10.1365 1149.88 10.5531C1149.85 9.3107 1151.45 8.78816 1152.15 9.81497C1152.85 8.79181 1154.46 9.3107 1154.42 10.5531C1155.59 10.1365 1156.59 11.5032 1155.83 12.4861C1157.02 12.8369 1157.02 14.5251 1155.83 14.8759Z" fill={color}/>
          <path d="M1152.12 2.05715C1152.47 1.56037 1153.24 1.81336 1153.23 2.41478C1153.8 2.21354 1154.28 2.87476 1153.91 3.35084C1154.49 3.52103 1154.49 4.33864 1153.91 4.50883C1154.28 4.98606 1153.8 5.64728 1153.23 5.44489C1153.24 6.04631 1152.46 6.2993 1152.12 5.80252C1151.78 6.2993 1151 6.04631 1151.02 5.44489C1150.45 5.64613 1149.97 4.98491 1150.34 4.50883C1149.76 4.33864 1149.76 3.52103 1150.34 3.35084C1149.97 2.87361 1150.45 2.21239 1151.02 2.41478C1151 1.81336 1151.78 1.56037 1152.12 2.05715Z" fill={color}/>
          <path d="M1087.24 13.1999C1086.01 13.3468 1084.79 13.4446 1083.57 13.102C1085.13 13.0042 1086.65 12.3679 1087.77 11.2423C1088.12 10.8507 1088.41 10.4592 1088.61 9.96976C1088.8 9.38245 1088.95 8.7462 1088.95 8.10996C1088.9 7.32688 1088.56 6.25016 1087.63 6.39698C1087.19 6.44593 1086.85 6.73958 1086.6 7.13111C1086.31 7.62054 1086.01 7.96313 1085.67 8.35467C1085.13 8.89303 1084.55 9.43139 1083.81 9.72505C1084.99 8.55044 1085.62 6.78852 1085.57 5.12449C1085.52 4.24353 1085.13 3.46046 1084.59 2.72633C1084.06 2.09008 1083.22 1.45383 1082.39 1.74748C1081.61 1.9922 1081.81 3.06892 1081.95 3.75411C1082.05 4.58613 1082.1 5.3692 1081.95 6.25016C1081.9 6.49487 1081.9 6.73958 1081.76 6.93535C1081.61 4.87978 1080.58 2.77527 1078.63 1.9922C1077.74 1.60066 1076.72 1.45383 1075.79 1.84537C1075.45 1.9922 1075.05 2.18796 1075 2.62844C1074.91 3.36257 1075.59 3.85199 1076.18 4.19459C1076.33 4.34142 1076.47 4.4393 1076.67 4.58613C1077.4 5.17343 1077.99 5.90756 1078.43 6.73958C1077.35 5.71179 1075.93 5.17343 1074.47 5.0266C1073.24 4.92872 1072.02 5.41814 1071.14 6.34804C1070.65 6.8864 1070.21 7.57159 1070.45 8.35467C1070.94 9.03986 1071.87 8.84409 1072.61 8.69726C1073.64 8.50149 1074.61 8.59938 1075.59 8.84409C1074.66 8.89303 1073.73 9.23562 1072.9 9.6761C1072.17 10.1166 1071.53 10.5571 1071.09 11.2912C1070.45 12.319 1070.16 13.5425 1070.55 14.6682C1070.75 15.1576 1071.09 15.647 1071.63 15.647C1071.97 15.5981 1072.27 15.4023 1072.51 15.1087C1073.29 14.0319 1074.08 13.0042 1075.2 12.3679C1074.37 13.3957 1073.93 14.6193 1073.73 15.9407C1073.64 16.7727 1073.83 17.5558 1074.22 18.2899C1074.42 18.6325 1074.61 18.9262 1074.86 19.2198C1075.05 19.4156 1075.25 19.5624 1075.49 19.7582C1075.93 20.0518 1076.42 20.2476 1076.91 20.1008C1077.6 19.8071 1077.55 18.9751 1077.45 18.3389C1077.21 17.1642 1077.26 16.0386 1077.5 14.9129C1077.65 16.3812 1078.19 17.7515 1079.16 18.8283C1080.34 20.0518 1082.34 20.6881 1083.91 19.7092C1084.3 19.4645 1084.35 19.024 1084.2 18.6325C1084.15 18.5836 1084.11 18.4857 1084.06 18.3878C1083.86 18.1431 1083.66 17.9473 1083.37 17.8005L1083.32 17.7026C1082.39 17.1153 1081.61 16.3322 1081.07 15.4023C1082.1 16.2343 1083.32 16.7238 1084.64 16.8706C1086.31 17.0174 1088.02 16.1854 1088.75 14.6682C1088.95 14.2767 1088.95 13.7872 1088.66 13.4446C1088.26 13.102 1087.73 13.102 1087.24 13.1999Z" fill={color}/>
          <path d="M1049.66 8.5522C1050.88 9.88381 1050.88 11.9192 1049.66 13.2508C1049.12 13.8517 1048.8 14.6247 1048.76 15.4365C1048.67 17.2353 1047.24 18.6745 1045.44 18.7589C1044.62 18.797 1043.85 19.1172 1043.25 19.6642C1041.92 20.8765 1039.88 20.8765 1038.55 19.6642C1037.95 19.1172 1037.18 18.797 1036.37 18.7589C1034.57 18.6745 1033.13 17.2353 1033.04 15.4365C1033.01 14.6247 1032.69 13.8517 1032.14 13.2508C1030.93 11.9192 1030.93 9.88381 1032.14 8.5522C1032.69 7.95127 1033.01 7.17824 1033.04 6.36647C1033.13 4.56768 1034.57 3.12847 1036.37 3.04408C1037.18 3.006 1037.95 2.6858 1038.55 2.13872C1039.88 0.926462 1041.92 0.926462 1043.25 2.13872C1043.85 2.6858 1044.62 3.006 1045.44 3.04408C1047.24 3.12848 1048.67 4.56768 1048.76 6.36647C1048.8 7.17824 1049.12 7.95127 1049.66 8.5522Z" fill={color}/>
          <path d="M1 11L1009 11.0001" stroke={color} strokeWidth="2" strokeLinecap="round"/>
        </svg>
      </motion.div>
    )}
  </AnimatePresence>
);


const TextContent = ({ text, className = "" }) => (
  <div className={`flex flex-col items-center space-y-4 absolute w-full ${className}`}>
    <div className="text-gray-800 text-4xl font-bold">
      {text}
    </div>
    <div className="text-gray-400 text-4xl font-bold opacity-30">
      {text}
    </div>
  </div>
);

const ThemeText = ({ 
  textState, 
  currentText, 
  previousText, 
  currentTheme,
  isTransitioning,
  themes,
  isChatOpen
}) => {
  if (isTransitioning && textState !== 'transitioning') return null;

  const currentColor = themes?.[Math.round(currentTheme)]?.color || '#ff4b6b';

  return (
    <div className="absolute left-1 top-1/2 -mt-32 w-full text-center z-[1]">
      <BrandBar color={currentColor} textState={textState} isChatOpen={isChatOpen}/>
      
      <AnimatePresence mode="sync">
        {textState === 'entering' && (
          <motion.div
            key={`enter-${currentTheme}`}
            initial={{ opacity: 0, y: -90 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ 
              duration: 1.1,
              ease: "easeOut",
              delay: 0.1
            }}
          >
            <TextContent text={currentText} />
          </motion.div>
        )}

        {textState === 'transitioning' && previousText && (
          <motion.div
            key={`prev-${currentTheme}-exit`}
            initial={{ opacity: 1, y: 0 }}
            animate={{ opacity: 0, y: -30 }}
            exit={{ opacity: 0, y: -30 }}
            transition={{ 
              duration: 0.5,
              ease: "easeInOut"
            }}
          >
            <TextContent text={previousText} />
          </motion.div>
        )}
        
        {textState === 'transitioning' && (
          <motion.div
            key={`current-${currentTheme}-enter`}
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ 
              duration: 0.5,
              ease: "easeInOut",
              delay: 0.05
            }}
          >
            <TextContent text={currentText} />
          </motion.div>
        )}

        {textState === 'active' && (
          <TextContent text={currentText} />
        )}
      </AnimatePresence>
    </div>
  );
};

export default ThemeText;